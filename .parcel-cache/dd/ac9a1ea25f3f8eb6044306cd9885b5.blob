"use strict";

require("core-js/modules/es.regexp.flags.js");
require("core-js/modules/web.immediate.js");
var model = _interopRequireWildcard(require("./model.js"));
var _recipeView = _interopRequireDefault(require("./views/recipeView.js"));
var _searchView = _interopRequireDefault(require("./views/searchView.js"));
var _resultsView = _interopRequireDefault(require("./views/resultsView.js"));
var _paginationView = _interopRequireDefault(require("./views/paginationView.js"));
var _regeneratorRuntime = require("regenerator-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// if(module.hot){
//   module.hot.accept();
// }

// https://forkify-api.herokuapp.com/v2

///////////////////////////////////////

const controlRecipes = async function () {
  try {
    const id = window.location.hash.slice(1);
    if (!id) return;
    _recipeView.default.renderSpinner();

    //1. loading recipe

    await model.loadRecipe(id);
    console.log(id);
    // const {recipe} =model.state.recipe

    //2.rendering recipe
    _recipeView.default.render(model.state.recipe);
  } catch (err) {
    _recipeView.default.renderError();
  }
};
const controlSearchResults = async function () {
  try {
    _resultsView.default.renderSpinner();
    //1) get search query
    const query = _searchView.default.getQuery();
    if (!query) return;

    //2) load search results
    await model.loadSearchResult(query);

    //3)render results
    // resultsView.render(model.state.search.results);
    _resultsView.default.render(model.getSearchResultsPage(2));

    //4) render initial pagination buttons
    _paginationView.default.render(model.state.search);
  } catch (err) {
    // resultsView.renderError();
    console.log(err);
  }
};
const init = function () {
  _recipeView.default.addHandlerRender(controlRecipes);
  _searchView.default.addHandlerSearch(controlSearchResults);
};
init();